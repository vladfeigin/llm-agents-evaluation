// KQL script
// Use management commands in this script to configure your database items, such as tables, functions, materialized views, and more.


.create-merge table traces (records:dynamic, EventProcessedUtcTime:datetime, PartitionId:string, EventEnqueuedUtcTime:datetime) 
.create-or-alter table traces ingestion json mapping 'traces_mapping'
```
[{"Properties":{"Path":"$['records']"},"column":"records","datatype":""},{"Properties":{"Path":"$['EventProcessedUtcTime']"},"column":"EventProcessedUtcTime","datatype":""},{"Properties":{"Path":"$['PartitionId']"},"column":"PartitionId","datatype":""},{"Properties":{"Path":"$['EventEnqueuedUtcTime']"},"column":"EventEnqueuedUtcTime","datatype":""}]
```
.create-merge table Evaluation (EventTime:datetime, item_OperationId:guid, item_ParentId:string, AgentName:string, ConfigVersion:string, ModelName:string, ModelVersion:string, ModelDeploymentName:string, OpenAIAPIVersion:string, Deployment:string, TotalTokens:long, PromptTokens:long, CompletionTokens:long, Duration:long, Temperature:string, Seed:long, EmbeddingEndpoint:string, EmbeddingDeployment:string, SearchType:string, SearchTopK:long, IntentSystemPrompt:string, ChatSystemPrompt:string, Coherence:real, Groundedness:real, Relevance:real, Similarity:real) 
.create-merge table OngoingChat (item_time:datetime, operation_id:guid, duration:int, success:string, prompt:dynamic, generated_message:dynamic, total_tokens:int, prompt_tokens:int, completion_tokens:int, lm_model:string) 
.create-merge table OngoingApplication (item_time:datetime, operation_id:guid, application_name:string, application_version:string, session_id:string, config_version:string, deployment:string) 
.create-merge table Application (item_time:datetime, operation_id:guid, application_name:string, application_version:string, session_id:string, config_version:string, duration:int, success:string, prompt:dynamic, generated_message:dynamic, total_tokens:int, prompt_tokens:int, completion_tokens:int, lm_model:string, deployment:string) 
.create-or-alter function with (skipvalidation = "true") EvaluationFlowInsert() {
     let AppTracesTbl = 
        traces
        | extend item = parse_json(records)
        | mv-expand item
        | serialize
        | extend RowNumber = row_number(1, prev(PartitionId) != PartitionId) 
        | where item.Type == "AppTraces" 
        | where todatetime(EventProcessedUtcTime) >= todatetime ("2024-12-09")
        | project
            EventProcessedUtcTime,
            PartitionId,
            RowNumber,
            item,
            metricName = item.metricName,
            Target = item.Target,
            Type = item.Type,
            PropertiesPayload = dynamic_to_json(item.Properties.payload);
     AppTracesTbl
    | project
        item_time = todatetime((item)["time"]),
        toguid(item.OperationId),
        tostring(item.ParentId),
        Message = dynamic_to_json(item.Message)
    | where Message has "batch-evaluation-flow-metrics"
    | extend parsed_json = parse_json(Message)
    | extend 
        AgentName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.agent_name),		
        ConfigVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.config_version),
        ModelName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_name),
        ModelVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_version),
        ModelDeploymentName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_deployment),
        OpenAIAPIVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.openai_api_version),
        IntentSystemPrompt = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.intent_system_prompt),
        ChatSystemPrompt = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.chat_system_prompt),
        Deployment = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_deployment_endpoint),
        Temperature = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_parameters.temperature),
        Seed = tolong(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_parameters.seed),
        EmbeddingEndpoint = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.embedding_endpoint),
        EmbeddingDeployment = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.embedding_deployment),
        SearchType = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.search_type),
        SearchTopK = tolong(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.top_k),
        TotalTokens = tolong(parsed_json.metadata.properties.system_metrics.total_tokens),
        PromptTokens = tolong(parsed_json.metadata.properties.system_metrics.prompt_tokens),
        CompletionTokens = tolong(parsed_json.metadata.properties.system_metrics.completion_tokens),
        Duration = tolong(parsed_json.metadata.properties.system_metrics.duration)       
    | where isnotempty(AgentName)         
    | mv-expand result = parsed_json.result
    | extend metric = tostring(result.metric), score = toreal(result.score)
    | project-away Message, parsed_json, result
    | evaluate pivot(metric, any(score))
    | sort by item_time asc
    | project
        EventTime = item_time,
        item_OperationId,
        item_ParentId,
        AgentName,
        ConfigVersion,
        ModelName,
        ModelVersion,
        ModelDeploymentName,
        OpenAIAPIVersion,
        Deployment,
        TotalTokens,
        PromptTokens,
        CompletionTokens,
        Duration,
        Temperature,
        Seed,
        EmbeddingEndpoint,
        EmbeddingDeployment,
        SearchType,
        SearchTopK,
        IntentSystemPrompt,
        ChatSystemPrompt,
        Coherence = coherence,
        Groundedness = groundedness,
        Relevance = relevance,
        Similarity = similarity
 }
.create-or-alter function with (skipvalidation = "true") OngoingChatInsert() {   
        let ongoing_expanded_table=
        traces
        | extend item = (records)
        | mv-expand item
        | serialize
        | where todatetime(EventEnqueuedUtcTime)>= todatetime('2024-12-07')
        | where item.Type == 'AppDependencies'
        | project     
            EventProcessedUtcTime,
            item,
            Target = item.Target,
            Type = item.Type;
        ongoing_expanded_table
        | project
        item_time = todatetime((item)["time"]),
        target = Target,
        operation_id = toguid(item.OperationId),
        item
        | where target == "openai_chat" 
        | extend parsed_item = parse_json(item)
        | extend duration = toint(parsed_item.DurationMs)
        | extend success = tostring(parsed_item.Success)
        | extend prompt = parsed_item.Properties.inputs
        | extend generated_message = parsed_item.Properties.["llm.generated_message"]
        | extend total_tokens = toint(parsed_item.Properties.["llm.usage.total_tokens"])
        | extend prompt_tokens = toint(parsed_item.Properties.["llm.usage.prompt_tokens"])
        | extend completion_tokens = toint(parsed_item.Properties.["llm.usage.completion_tokens"])
        | extend lm_model = tostring(parsed_item.Properties["llm.response.model"])
        | project item_time, operation_id, duration, success, prompt, generated_message,total_tokens, prompt_tokens, completion_tokens,lm_model
      }
.create-or-alter function with (skipvalidation = "true") OngoingApplicationInsert() {   
        let ongoing_appl_expanded_table=
        traces
        | extend item = (records)
        | mv-expand item
        | serialize
        | where todatetime(EventEnqueuedUtcTime)>= todatetime('2024-12-07')
        | where item.Type == 'AppDependencies'
        | project     
            EventProcessedUtcTime,
            item,
            Target = item.Target,
            Type = item.Type;
        ongoing_appl_expanded_table
        | project
        item_time = todatetime(item["time"]),
        target = Target,
        operation_id = toguid(item.OperationId),
        item
        | where target == "RAG.__chat__" 
        | extend parsed_item = parse_json(item)
        | extend application_name = tostring(parsed_item.Properties.application_name)
        | extend application_version = tostring(parsed_item.Properties.application_version)
        | extend session_id = tostring(parsed_item.Properties.session_id)
        | extend config_version = tostring(parsed_item.Properties.config_version)
        | extend deployment = tostring(parsed_item.Properties.endpoint)
        | project item_time, operation_id, application_name, application_version, session_id, config_version,deployment
      }
.alter table Evaluation policy update "[{\"IsEnabled\":true,\"Source\":\"traces\",\"Query\":\"EvaluationFlowInsert()\",\"IsTransactional\":true,\"PropagateIngestionProperties\":false,\"ManagedIdentity\":null}]"
.alter table OngoingChat policy update "[{\"IsEnabled\":true,\"Source\":\"traces\",\"Query\":\"OngoingChatInsert()\",\"IsTransactional\":true,\"PropagateIngestionProperties\":false,\"ManagedIdentity\":null}]"
.alter table OngoingApplication policy update "[{\"IsEnabled\":true,\"Source\":\"traces\",\"Query\":\"OngoingApplicationInsert()\",\"IsTransactional\":true,\"PropagateIngestionProperties\":false,\"ManagedIdentity\":null}]"
