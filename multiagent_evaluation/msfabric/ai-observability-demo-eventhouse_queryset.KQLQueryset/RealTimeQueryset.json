{"payload":{"tabs":[{"id":"2887837c-ac41-4434-9aff-f5d95430f682","queryRange":{"startLineNumber":96,"startColumn":1,"endLineNumber":103,"endColumn":1},"title":"misc","text":"opentel_traces\n| count \n\nopentel_traces\n| mv-expand records\n| count \n\n\nopentel_traces\n| mv-expand records\n| where records.Type == \"AppDependencies\"\n| count \n\nopentel_traces\n| mv-expand records\n| summarize count() by tostring(records.Type)\n\nopentel_traces\n| mv-expand records\n| where records .Type == \"AppTraces\"\n\nopentel_traces\n| mv-expand records\n| where records.Type == \"AppDependencies\"\n\n\n\ntraces\n| mv-expand records \n| where records.['time'] >= todatetime(\"2025-01-03\")\n| where records.Type == \"AppTraces\"\n| summarize count() by tostring(records.Type)\n\n\nopentel_traces\n| mv-expand records \n| where records.['time'] >= todatetime(\"2025-01-03\")\n| where records.Type == \"AppTraces\"\n| summarize count() by tostring(records.Type)\n\n\n\nopentel_traces\n| mv-expand records \n| where records.['time'] >= todatetime(\"2025-01-03\")\n| where records.Type == \"AppTraces\"\n| extend parsed_message = parse_json(records.Message) \n| summarize count() by tostring(records.Type)\n\n\nopentel_traces\n| mv-expand records \n| where records.['time'] >= todatetime(\"2025-01-03\")\n| where records.Type == \"AppTraces\"\n| extend message = records.Message\n| where message contains \"batch-evaluation-flow\"\n\n\nopentel_traces\n| mv-expand records \n| where records.['time'] >= todatetime(\"2025-01-03\")\n| where records.Type == \"AppDependencies\"\n| extend properties = records.Properties\n| where properties.span_type=='LLM' \n| where properties.function=='openai.resources.chat.completions.Completions.create' \n| sort by EventProcessedUtcTime\n\n\nopentel_traces\n| mv-expand records \n| where records.['time'] >= todatetime(\"2025-01-03\")\n| where records.Type == \"AppDependencies\"\n| extend properties = records.Properties\n| summarize count() by tostring(properties.span_type)\n\n# ongoing, includes user intent calls to openai when there is a history (every question generate 2 call, except very first one), also we include embeddings tokens \nopentel_traces\n| mv-expand records \n| where records.['time'] >= todatetime(\"2025-01-03\")\n| where records.Type == \"AppDependencies\"\n| extend properties = records.Properties\n| where properties.span_type in ('LLM', \"Embedding\") \n| where properties.function in ('openai.resources.chat.completions.Completions.create', 'openai.resources.embeddings.Embeddings.create')\n| extend model_name = properties.['llm.response.model']\n| extend operation_id = records.OperationId\n| extend parent_id = records.ParentId\n| extend inputs = properties.inputs\n| extend output = properties['llm.generated_message']\n| extend ch = properties.output\n| sort by EventProcessedUtcTime\n\n\n\n# evaluation metrics \n\nopentel_traces\n| mv-expand records \n| where records.['time'] >= todatetime(\"2025-01-03\")\n| where records.Type == \"AppTraces\"\n| extend message = records.Message\n| where message contains \"batch-evaluation-flow-raw\"\n\n","commandInContext":"opentel_traces\n| mv-expand records \n| where records.['time'] >= todatetime(\"2025-01-03\")\n| where records.Type == \"AppTraces\"\n| extend message = records.Message\n| where message contains \"batch-evaluation-flow-raw\"\n\n","executionStatus":"done","clientRequestId":"Kusto.Web.RTA.QuerySet;b31240cd-8348-4397-8bea-5b2fe86949d1;a5a29792-6f65-4425-8b84-2d8f91f640b9","entityInContext":"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054","commandType":"Query","commandWithoutLeadingComments":"opentel_traces\n| mv-expand records \n| where records.['time'] >= todatetime(\"2025-01-03\")\n| where records.Type == \"AppTraces\"\n| extend message = records.Message\n| where message contains \"batch-evaluation-flow-raw\"\n\n","hideEmptyColumns":false,"cursorPosition":{"lineNumber":96,"column":1}},{"id":"905667a3-9829-4f0b-9de1-df1a43d3fc00","queryRange":{"startLineNumber":87,"startColumn":1,"endLineNumber":88,"endColumn":1},"title":"create_evaluation_metrics_table","text":".create-or-alter function EvaluationMetricsFlowInsert() {\n     let AppTracesTbl = \n        opentel_traces\n        | extend item = parse_json(records)\n        | mv-expand item\n        | where item.Type == \"AppTraces\" \n        | project\n            EventProcessedUtcTime,\n            item;\n     AppTracesTbl\n    | project\n        EventTime = todatetime((item)[\"time\"]),\n        OperationId = toguid(item.OperationId),\n        ParentId = tostring(item.ParentId),\n        Message = dynamic_to_json(item.Message)\n    | where Message has \"batch-evaluation-flow-metrics\"\n    | extend parsed_json = parse_json(Message)\n    | extend \n        AgentName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.agent_name),\t\t\n        ConfigVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.config_version),\n        ModelName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_name),\n        ModelVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_version),\n        ModelDeploymentName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_deployment),\n        OpenAIAPIVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.openai_api_version),\n        IntentSystemPrompt = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.intent_system_prompt),\n        ChatSystemPrompt = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.chat_system_prompt),\n        Deployment = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_deployment_endpoint),\n        Temperature = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_parameters.temperature),\n        Seed = tolong(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_parameters.seed),\n        EmbeddingEndpoint = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.embedding_endpoint),\n        EmbeddingDeployment = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.embedding_deployment),\n        SearchType = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.search_type),\n        SearchTopK = tolong(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.top_k),\n        TotalTokens = tolong(parsed_json.metadata.properties.system_metrics.total_tokens),\n        PromptTokens = tolong(parsed_json.metadata.properties.system_metrics.prompt_tokens),\n        CompletionTokens = tolong(parsed_json.metadata.properties.system_metrics.completion_tokens),\n        Duration = tolong(parsed_json.metadata.properties.system_metrics.duration)       \n    | where isnotempty(AgentName)         \n    | mv-expand result = parsed_json.result\n    | extend metric = tostring(result.metric), score = toreal(result.score)\n    | project-away Message, parsed_json, result\n    | evaluate pivot(metric, any(score))\n    | sort by EventTime asc\n    | project\n        EventTime,\n        OperationId,\n        ParentId,\n        AgentName,\n        ConfigVersion,\n        ModelName,\n        ModelVersion,\n        ModelDeploymentName,\n        OpenAIAPIVersion,\n        Deployment,\n        TotalTokens,\n        PromptTokens,\n        CompletionTokens,\n        Duration,\n        Temperature,\n        Seed,\n        EmbeddingEndpoint,\n        EmbeddingDeployment,\n        SearchType,\n        SearchTopK,\n        IntentSystemPrompt,\n        ChatSystemPrompt,\n        Coherence = coherence,\n        Groundedness = groundedness,\n        Relevance = relevance,\n        Similarity = similarity\n }\n   \n \n   .create table \n    EvaluationMetrics (EventTime: datetime, OperationId: guid, ParentId: string, AgentName: string, ConfigVersion: string, ModelName: string, ModelVersion: string, ModelDeploymentName: string, OpenAIAPIVersion: string,\n    Deployment: string, TotalTokens: long, PromptTokens: long, CompletionTokens: long, Duration: long, Temperature: string, Seed: long, EmbeddingEndpoint:string, EmbeddingDeployment: string, SearchType: string, SearchTopK: long, IntentSystemPrompt: string, ChatSystemPrompt: string,\n    Coherence: real, Groundedness: real, Relevance: real, Similarity: real)\n\n//.drop table EvaluationMetrics\n\n.alter table EvaluationMetrics policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"traces\", \"Query\": \"EvaluationMetricsFlowInsert()\", \"IsTransactional\": true}]'\n\n.set-or-append EvaluationMetrics <|\n    EvaluationMetricsFlowInsert()\n\n\nEvaluationMetrics | take 10\n\n","commandInContext":"","executionStatus":"gotFromCache","clientRequestId":"Kusto.Web.RTA.QuerySet;b31240cd-8348-4397-8bea-5b2fe86949d1;2dd38c50-67ec-4110-adde-5423b06b01e0","completionInfo":-1134030856,"entityInContext":"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054","commandType":"Unknown","commandWithoutLeadingComments":"","hideEmptyColumns":false,"cursorPosition":{"lineNumber":87,"column":1}},{"id":"e2163182-c388-48fe-ba4a-8500eb2fd1f5","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":69,"endColumn":1},"title":"create_evaluation_raw_table","text":".create-or-alter function EvaluationRawFlowInsert() {\n     let AppTracesTbl = \n        opentel_traces\n        | extend item = parse_json(records)\n        | mv-expand item\n        | where item.Type == \"AppTraces\" \n        | project\n            EventProcessedUtcTime,\n            item;\n     AppTracesTbl\n    | project\n        EventTime = todatetime((item)[\"time\"]),\n        OperationId = toguid(item.OperationId),\n        ParentId = tostring(item.ParentId),\n        Message = dynamic_to_json(item.Message)\n    | where Message has \"batch-evaluation-flow-raw\"\n    | extend parsed_json = parse_json(Message)\n    | extend \n        AgentName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.agent_name),\t\t\n        ConfigVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.config_version),\n        ModelName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_name),\n        ModelVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_version),\n        ModelDeploymentName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_deployment),\n        OpenAIAPIVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.openai_api_version),\n        IntentSystemPrompt = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.intent_system_prompt),\n        ChatSystemPrompt = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.chat_system_prompt),\n        Deployment = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_deployment_endpoint),\n        Temperature = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_parameters.temperature),\n        Seed = tolong(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_parameters.seed),\n        EmbeddingEndpoint = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.embedding_endpoint),\n        EmbeddingDeployment = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.embedding_deployment),\n        SearchType = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.search_type),\n        SearchTopK = tolong(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.top_k),\n        TotalTokens = tolong(parsed_json.metadata.properties.system_metrics.total_tokens),\n        PromptTokens = tolong(parsed_json.metadata.properties.system_metrics.prompt_tokens),\n        CompletionTokens = tolong(parsed_json.metadata.properties.system_metrics.completion_tokens),\n        Duration = tolong(parsed_json.metadata.properties.system_metrics.duration),\n        EvaluationDataSet = tostring(parsed_json.metadata.data),\n        EvaluationPortalUrl = tostring(parsed_json.metadata.portal_url)    \n    | where isnotempty(AgentName)         \n    | mv-expand EvaluationResult = parsed_json.result\n    | sort by EventTime asc\n    | project\n        EventTime,\n        OperationId,\n        ParentId ,\n        AgentName,\n        ConfigVersion,\n        ModelName,\n        ModelVersion,\n        ModelDeploymentName,\n        OpenAIAPIVersion,\n        Deployment,\n        TotalTokens,\n        PromptTokens,\n        CompletionTokens,\n        Duration,\n        Temperature,\n        Seed,\n        EmbeddingEndpoint,\n        EmbeddingDeployment,\n        SearchType,\n        SearchTopK,\n        IntentSystemPrompt,\n        ChatSystemPrompt,\n        EvaluationResult\n }\n   \n \n   .create table \n    EvaluationRaw (EventTime: datetime, OperationId: guid, ParentId: string, AgentName: string, ConfigVersion: string, ModelName: string, ModelVersion: string, ModelDeploymentName: string, OpenAIAPIVersion: string,\n    Deployment: string, TotalTokens: long, PromptTokens: long, CompletionTokens: long, Duration: long, Temperature: string, Seed: long, EmbeddingEndpoint:string, EmbeddingDeployment: string, SearchType: string, SearchTopK: long, IntentSystemPrompt: string, ChatSystemPrompt: string,\n    EvaluationResult:dynamic )\n\n//.drop table EvaluationRaw\n\n.alter table EvaluationRaw policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"opentel_traces\", \"Query\": \"EvaluationRawFlowInsert()\", \"IsTransactional\": true}]'\n\n.set-or-append EvaluationRaw <|\n    EvaluationRawFlowInsert()\n\n\nEvaluationRaw | take 10\n\n","commandInContext":".create-or-alter function EvaluationRawFlowInsert() {\n     let AppTracesTbl = \n        opentel_traces\n        | extend item = parse_json(records)\n        | mv-expand item\n        | where item.Type == \"AppTraces\" \n        | project\n            EventProcessedUtcTime,\n            item;\n     AppTracesTbl\n    | project\n        EventTime = todatetime((item)[\"time\"]),\n        OperationId = toguid(item.OperationId),\n        ParentId = tostring(item.ParentId),\n        Message = dynamic_to_json(item.Message)\n    | where Message has \"batch-evaluation-flow-raw\"\n    | extend parsed_json = parse_json(Message)\n    | extend \n        AgentName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.agent_name),\t\t\n        ConfigVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.config_version),\n        ModelName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_name),\n        ModelVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_version),\n        ModelDeploymentName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_deployment),\n        OpenAIAPIVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.openai_api_version),\n        IntentSystemPrompt = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.intent_system_prompt),\n        ChatSystemPrompt = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.chat_system_prompt),\n        Deployment = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_deployment_endpoint),\n        Temperature = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_parameters.temperature),\n        Seed = tolong(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_parameters.seed),\n        EmbeddingEndpoint = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.embedding_endpoint),\n        EmbeddingDeployment = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.embedding_deployment),\n        SearchType = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.search_type),\n        SearchTopK = tolong(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.top_k),\n        TotalTokens = tolong(parsed_json.metadata.properties.system_metrics.total_tokens),\n        PromptTokens = tolong(parsed_json.metadata.properties.system_metrics.prompt_tokens),\n        CompletionTokens = tolong(parsed_json.metadata.properties.system_metrics.completion_tokens),\n        Duration = tolong(parsed_json.metadata.properties.system_metrics.duration),\n        EvaluationDataSet = tostring(parsed_json.metadata.data),\n        EvaluationPortalUrl = tostring(parsed_json.metadata.portal_url)    \n    | where isnotempty(AgentName)         \n    | mv-expand EvaluationResult = parsed_json.result\n    | sort by EventTime asc\n    | project\n        EventTime,\n        OperationId,\n        ParentId ,\n        AgentName,\n        ConfigVersion,\n        ModelName,\n        ModelVersion,\n        ModelDeploymentName,\n        OpenAIAPIVersion,\n        Deployment,\n        TotalTokens,\n        PromptTokens,\n        CompletionTokens,\n        Duration,\n        Temperature,\n        Seed,\n        EmbeddingEndpoint,\n        EmbeddingDeployment,\n        SearchType,\n        SearchTopK,\n        IntentSystemPrompt,\n        ChatSystemPrompt,\n        EvaluationResult\n }\n   \n","executionStatus":"gotFromCache","clientRequestId":"Kusto.Web.RTA.QuerySet;b31240cd-8348-4397-8bea-5b2fe86949d1;011b437d-85dd-4ef9-9e13-1015c7b95adb","completionInfo":-1857566061,"entityInContext":"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054","commandType":"AdminCommand","commandWithoutLeadingComments":".create-or-alter function EvaluationRawFlowInsert() {\n     let AppTracesTbl = \n        opentel_traces\n        | extend item = parse_json(records)\n        | mv-expand item\n        | where item.Type == \"AppTraces\" \n        | project\n            EventProcessedUtcTime,\n            item;\n     AppTracesTbl\n    | project\n        EventTime = todatetime((item)[\"time\"]),\n        OperationId = toguid(item.OperationId),\n        ParentId = tostring(item.ParentId),\n        Message = dynamic_to_json(item.Message)\n    | where Message has \"batch-evaluation-flow-raw\"\n    | extend parsed_json = parse_json(Message)\n    | extend \n        AgentName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.agent_name),\t\t\n        ConfigVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.config_version),\n        ModelName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_name),\n        ModelVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_version),\n        ModelDeploymentName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_deployment),\n        OpenAIAPIVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.openai_api_version),\n        IntentSystemPrompt = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.intent_system_prompt),\n        ChatSystemPrompt = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.chat_system_prompt),\n        Deployment = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_deployment_endpoint),\n        Temperature = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_parameters.temperature),\n        Seed = tolong(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_parameters.seed),\n        EmbeddingEndpoint = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.embedding_endpoint),\n        EmbeddingDeployment = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.embedding_deployment),\n        SearchType = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.search_type),\n        SearchTopK = tolong(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.top_k),\n        TotalTokens = tolong(parsed_json.metadata.properties.system_metrics.total_tokens),\n        PromptTokens = tolong(parsed_json.metadata.properties.system_metrics.prompt_tokens),\n        CompletionTokens = tolong(parsed_json.metadata.properties.system_metrics.completion_tokens),\n        Duration = tolong(parsed_json.metadata.properties.system_metrics.duration),\n        EvaluationDataSet = tostring(parsed_json.metadata.data),\n        EvaluationPortalUrl = tostring(parsed_json.metadata.portal_url)    \n    | where isnotempty(AgentName)         \n    | mv-expand EvaluationResult = parsed_json.result\n    | sort by EventTime asc\n    | project\n        EventTime,\n        OperationId,\n        ParentId ,\n        AgentName,\n        ConfigVersion,\n        ModelName,\n        ModelVersion,\n        ModelDeploymentName,\n        OpenAIAPIVersion,\n        Deployment,\n        TotalTokens,\n        PromptTokens,\n        CompletionTokens,\n        Duration,\n        Temperature,\n        Seed,\n        EmbeddingEndpoint,\n        EmbeddingDeployment,\n        SearchType,\n        SearchTopK,\n        IntentSystemPrompt,\n        ChatSystemPrompt,\n        EvaluationResult\n }","hideEmptyColumns":false,"cursorPosition":{"lineNumber":3,"column":4}},{"id":"4132b5fb-4db1-47ad-8f57-58c08309e86b","queryRange":{"startLineNumber":79,"startColumn":1,"endLineNumber":100,"endColumn":1},"title":"create_ongoing_monitoring_table","text":"     //--  ongoing usage details\n\n      .create-or-alter function OngoingUsageInsert() {   \n        let ongoing_expanded_table=\n        opentel_traces\n        | mv-expand records \n        | where records.Type == 'AppDependencies';\n        ongoing_expanded_table\n        | project\n            EventTime = todatetime((records)[\"time\"]),\n            OperationId = toguid(records.OperationId),\n            ParentId = tostring(records.ParentId),\n            records\n        | extend properties = records.Properties\n        | where properties.span_type in ('LLM', \"Embedding\") \n        | where properties.function in ('openai.resources.chat.completions.Completions.create', 'openai.resources.embeddings.Embeddings.create')\n        | extend Success = tostring(records.Success)\n        | extend Duration = toint(records.DurationMs)\n        | extend ModelName = tostring (properties.['llm.response.model'])\n        | extend Prompt = properties.inputs\n        | extend Output = properties['llm.generated_message']\n        | extend TotalTokens = toint(properties[\"llm.usage.total_tokens\"])\n        | extend PromptTokens = toint(properties[\"llm.usage.prompt_tokens\"])\n        | extend CompletionTokens = toint(properties[\"llm.usage.completion_tokens\"])\n        | project EventTime, OperationId, ParentId, Success, Duration, Prompt, Output, ModelName, TotalTokens, PromptTokens, CompletionTokens\n      }\n  \n    .create table \n    OngoingUsage(EventTime: datetime, OperationId: guid, ParentId: string, Success: string,  Duration:int,  Prompt:dynamic , Output:dynamic , ModelName: string , TotalTokens:int, PromptTokens:int, CompletionTokens:int)\n\n\n.alter table OngoingUsage policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"opentel_traces\", \"Query\": \"OngoingUsageInsert()\", \"IsTransactional\": true}]'\n\n.set-or-append OngoingUsage <|\n    OngoingUsageInsert()\n\nOngoingUsage\n\n\n\n\n//-  --- application details \n\n      .create-or-alter function ApplicationDetailsInsert() {   \n        let ongoing_appl_expanded_table=\n         opentel_traces\n        | mv-expand records \n        | where records.Type == 'AppDependencies';\n        ongoing_appl_expanded_table\n        | project\n            EventTime = todatetime(records[\"time\"]),\n            OperationId = toguid(records.OperationId),\n            ParentId = tostring(records.ParentId),\n        records\n        | where records.Target == \"RAG.__chat__\" \n        | extend ApplicationName = tostring(records.Properties.application_name)\n        | extend ApplicationVersion = tostring(records.Properties.application_version)\n        | extend SessionId = tostring(records.Properties.session_id)\n        | extend ConfigVersion = tostring(records.Properties.config_version)\n        | extend Deployment = tostring(records.Properties.endpoint)\n        | project EventTime, OperationId, ParentId, ApplicationName, ApplicationVersion, SessionId, ConfigVersion, Deployment}\n\n     \n    .create table \n    ApplicationDetails (EventTime: datetime, OperationId: guid, ParentId: string, ApplicationName:string , ApplicationVersion:string ,SessionId:string , ConfigVersion:string, Deployment:string ) \n\n.alter table ApplicationDetails policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"opentel_traces\", \"Query\": \"ApplicationDetailsInsert()\", \"IsTransactional\": true}]'\n\n.set-or-append ApplicationDetails <|\n    ApplicationDetailsInsert()   \n\nApplicationDetails\n\n\n// create a join table\n\n.set-or-replace ApplicationUsage <|\nApplicationDetails\n| join OngoingUsage on OperationId\n|project \n    EventTime,\n    OperationId,\n    ParentId,\n    ApplicationName,\n    ApplicationVersion,\n    SessionId,\n    ConfigVersion,\n    Duration,\n    Success,\n    Prompt,\n    Output,\n    TotalTokens,\n    PromptTokens,\n    CompletionTokens,\n    ModelName, \n    Deployment\n\nApplicationUsage\n\n\n\n","commandInContext":"\nApplicationUsage","executionStatus":"done","clientRequestId":"Kusto.Web.RTA.QuerySet;b31240cd-8348-4397-8bea-5b2fe86949d1;3c164b31-e90f-4202-9c32-0c62e2498bde","completionInfo":-1917387756,"entityInContext":"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054","commandType":"Query","commandWithoutLeadingComments":"\nApplicationUsage","hideEmptyColumns":false,"cursorPosition":{"lineNumber":99,"column":1}}],"tabInContext":"4132b5fb-4db1-47ad-8f57-58c08309e86b","connections":{"trd-21p215vdaeysn27sv9.z3":{"clusterType":"Engine","name":"trd-21p215vdaeysn27sv9.z3","connectionString":"https://trd-21p215vdaeysn27sv9.z3.kusto.fabric.microsoft.com","initialCatalog":"1cebe6db-ac4b-47b6-a667-b4b18a7ab054","databases":{"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054":{"id":"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054","name":"1cebe6db-ac4b-47b6-a667-b4b18a7ab054","prettyName":"ai-observability-demo-eventhouse","fetchState":"notStarted","fetchStateError":"","tables":{},"functions":{},"entityGroups":{},"accessMode":"ReadWrite","minorVersion":1,"majorVersion":116}},"id":"trd-21p215vdaeysn27sv9.z3","fetchState":"done","fetchStateError":"","tooBigToCache":true,"serviceOffering":"Trident"}}}}