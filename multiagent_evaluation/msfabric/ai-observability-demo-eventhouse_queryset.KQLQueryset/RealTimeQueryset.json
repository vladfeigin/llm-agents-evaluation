{"payload":{"tabs":[{"id":"905667a3-9829-4f0b-9de1-df1a43d3fc00","queryRange":{"startLineNumber":96,"startColumn":1,"endLineNumber":98,"endColumn":1},"title":"create_evaluation_monitoring_table","text":".create-or-alter function EvaluationFlowInsert() {\n     let AppTracesTbl = \n        traces\n        | extend item = parse_json(records)\n        | mv-expand item\n        | serialize\n        | extend RowNumber = row_number(1, prev(PartitionId) != PartitionId) \n        | where item.Type == \"AppTraces\" \n        | where todatetime(EventProcessedUtcTime) >= todatetime (\"2024-12-09\")\n        | project\n            EventProcessedUtcTime,\n            PartitionId,\n            RowNumber,\n            item,\n            metricName = item.metricName,\n            Target = item.Target,\n            Type = item.Type,\n            PropertiesPayload = dynamic_to_json(item.Properties.payload);\n     AppTracesTbl\n    | project\n        item_time = todatetime((item)[\"time\"]),\n        toguid(item.OperationId),\n        tostring(item.ParentId),\n        Message = dynamic_to_json(item.Message)\n    | where Message has \"batch-evaluation-flow-metrics\"\n    | extend parsed_json = parse_json(Message)\n    | extend \n        AgentName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.agent_name),\t\t\n        ConfigVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.config_version),\n        ModelName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_name),\n        ModelVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_version),\n        ModelDeploymentName = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_deployment),\n        OpenAIAPIVersion = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.openai_api_version),\n        IntentSystemPrompt = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.intent_system_prompt),\n        ChatSystemPrompt = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.chat_system_prompt),\n        Deployment = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_deployment_endpoint),\n        Temperature = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_parameters.temperature),\n        Seed = tolong(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.model_parameters.seed),\n        EmbeddingEndpoint = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.embedding_endpoint),\n        EmbeddingDeployment = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.embedding_deployment),\n        SearchType = tostring(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.search_type),\n        SearchTopK = tolong(parsed_json.metadata.tags.run_configuraton.AgentConfiguration.retrieval.top_k),\n        TotalTokens = tolong(parsed_json.metadata.properties.system_metrics.total_tokens),\n        PromptTokens = tolong(parsed_json.metadata.properties.system_metrics.prompt_tokens),\n        CompletionTokens = tolong(parsed_json.metadata.properties.system_metrics.completion_tokens),\n        Duration = tolong(parsed_json.metadata.properties.system_metrics.duration)       \n    | where isnotempty(AgentName)         \n    | mv-expand result = parsed_json.result\n    | extend metric = tostring(result.metric), score = toreal(result.score)\n    | project-away Message, parsed_json, result\n    | evaluate pivot(metric, any(score))\n    | sort by item_time asc\n    | project\n        EventTime = item_time,\n        item_OperationId,\n        item_ParentId,\n        AgentName,\n        ConfigVersion,\n        ModelName,\n        ModelVersion,\n        ModelDeploymentName,\n        OpenAIAPIVersion,\n        Deployment,\n        TotalTokens,\n        PromptTokens,\n        CompletionTokens,\n        Duration,\n        Temperature,\n        Seed,\n        EmbeddingEndpoint,\n        EmbeddingDeployment,\n        SearchType,\n        SearchTopK,\n        IntentSystemPrompt,\n        ChatSystemPrompt,\n        Coherence = coherence,\n        Groundedness = groundedness,\n        Relevance = relevance,\n        Similarity = similarity\n }\n   \n \n   .create table \n    Evaluation (EventTime: datetime, item_OperationId: guid, item_ParentId: string, AgentName: string, ConfigVersion: string, ModelName: string, ModelVersion: string, ModelDeploymentName: string, OpenAIAPIVersion: string,\n    Deployment: string, TotalTokens: long, PromptTokens: long, CompletionTokens: long, Duration: long, Temperature: string, Seed: long, EmbeddingEndpoint:string, EmbeddingDeployment: string, SearchType: string, SearchTopK: long, IntentSystemPrompt: string, ChatSystemPrompt: string,\n    Coherence: real, Groundedness: real, Relevance: real, Similarity: real)\n\n//.drop table EvaluationFlow\n\n.alter table Evaluation policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"traces\", \"Query\": \"EvaluationFlowInsert()\", \"IsTransactional\": true}]'\n\n.set-or-append Evaluation <|\n    EvaluationFlowInsert()\n\nEvaluation | take 10\n\n","commandInContext":"Evaluation | take 10\n\n","executionStatus":"gotFromCache","clientRequestId":"Kusto.Web.RTA.QuerySet;b31240cd-8348-4397-8bea-5b2fe86949d1;10c98f4e-b256-4a46-ae89-8a3872b18b33","completionInfo":-393424589,"entityInContext":"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054","commandType":"Query","commandWithoutLeadingComments":"Evaluation | take 10\n\n","hideEmptyColumns":false,"cursorPosition":{"lineNumber":96,"column":1}},{"id":"4132b5fb-4db1-47ad-8f57-58c08309e86b","queryRange":{"startLineNumber":91,"startColumn":1,"endLineNumber":111,"endColumn":1},"title":"create_ongoing_monitoring_table","text":"     //--  open ai chat details\n\n      .create-or-alter function OngoingChatInsert() {   \n        let ongoing_expanded_table=\n        traces\n        | extend item = (records)\n        | mv-expand item\n        | serialize\n        | where todatetime(EventEnqueuedUtcTime)>= todatetime('2024-12-07')\n        | where item.Type == 'AppDependencies'\n        | project     \n            EventProcessedUtcTime,\n            item,\n            Target = item.Target,\n            Type = item.Type;\n        ongoing_expanded_table\n        | project\n        item_time = todatetime((item)[\"time\"]),\n        target = Target,\n        operation_id = toguid(item.OperationId),\n        item\n        | where target == \"openai_chat\" \n        | extend parsed_item = parse_json(item)\n        | extend duration = toint(parsed_item.DurationMs)\n        | extend success = tostring(parsed_item.Success)\n        | extend prompt = parsed_item.Properties.inputs\n        | extend generated_message = parsed_item.Properties.[\"llm.generated_message\"]\n        | extend total_tokens = toint(parsed_item.Properties.[\"llm.usage.total_tokens\"])\n        | extend prompt_tokens = toint(parsed_item.Properties.[\"llm.usage.prompt_tokens\"])\n        | extend completion_tokens = toint(parsed_item.Properties.[\"llm.usage.completion_tokens\"])\n        | extend lm_model = tostring(parsed_item.Properties[\"llm.response.model\"])\n        | project item_time, operation_id, duration, success, prompt, generated_message,total_tokens, prompt_tokens, completion_tokens,lm_model\n      }\n\n\n    .create table \n    OngoingChat (item_time: datetime, operation_id: guid, duration:int , success: string  , prompt:dynamic , generated_message:dynamic ,total_tokens:int, prompt_tokens:int, completion_tokens:int, lm_model:string)\n\n\n.alter table OngoingChat policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"traces\", \"Query\": \"OngoingChatInsert()\", \"IsTransactional\": true}]'\n\n.set-or-append OngoingChat <|\n    OngoingChatInsert()\n\n\n//-  --- application details \n\n      .create-or-alter function OngoingApplicationInsert() {   \n        let ongoing_appl_expanded_table=\n        traces\n        | extend item = (records)\n        | mv-expand item\n        | serialize\n        | where todatetime(EventEnqueuedUtcTime)>= todatetime('2024-12-07')\n        | where item.Type == 'AppDependencies'\n        | project     \n            EventProcessedUtcTime,\n            item,\n            Target = item.Target,\n            Type = item.Type;\n        ongoing_appl_expanded_table\n        | project\n        item_time = todatetime(item[\"time\"]),\n        target = Target,\n        operation_id = toguid(item.OperationId),\n        item\n        | where target == \"RAG.__chat__\" \n        | extend parsed_item = parse_json(item)\n        | extend application_name = tostring(parsed_item.Properties.application_name)\n        | extend application_version = tostring(parsed_item.Properties.application_version)\n        | extend session_id = tostring(parsed_item.Properties.session_id)\n        | extend config_version = tostring(parsed_item.Properties.config_version)\n        | extend deployment = tostring(parsed_item.Properties.endpoint)\n        | project item_time, operation_id, application_name, application_version, session_id, config_version,deployment\n      }\n\n\n    .create table \n    OngoingApplication (item_time: datetime, operation_id: guid, application_name:string , application_version:string ,session_id:string , config_version:string, deployment:string ) \n\n.alter table OngoingApplication policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"traces\", \"Query\": \"OngoingApplicationInsert()\", \"IsTransactional\": true}]'\n\n.set-or-append OngoingApplication <|\n    OngoingApplicationInsert()   \n\n\n// create a join table\n\n.set-or-replace Application <|\nOngoingApplication\n| join OngoingChat on operation_id\n|project \n    item_time,\n    operation_id,\n    application_name,\n    application_version,\n    session_id,\n    config_version,\n    duration,\n    success,\n    prompt,\n    generated_message,\n    total_tokens,\n    prompt_tokens,\n    completion_tokens,\n    lm_model, \n    deployment\n\n\n\n\n\n","commandInContext":".set-or-replace Application <|\nOngoingApplication\n| join OngoingChat on operation_id\n|project \n    item_time,\n    operation_id,\n    application_name,\n    application_version,\n    session_id,\n    config_version,\n    duration,\n    success,\n    prompt,\n    generated_message,\n    total_tokens,\n    prompt_tokens,\n    completion_tokens,\n    lm_model, \n    deployment","executionStatus":"done","clientRequestId":"Kusto.Web.RTA.QuerySet;b31240cd-8348-4397-8bea-5b2fe86949d1;916caf4b-0f53-4ed4-9cb8-80629e5264fb","completionInfo":1854019364,"entityInContext":"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054","commandType":"AdminCommand","commandWithoutLeadingComments":".set-or-replace Application <|\nOngoingApplication\n| join OngoingChat on operation_id\n|project \n    item_time,\n    operation_id,\n    application_name,\n    application_version,\n    session_id,\n    config_version,\n    duration,\n    success,\n    prompt,\n    generated_message,\n    total_tokens,\n    prompt_tokens,\n    completion_tokens,\n    lm_model, \n    deployment","hideEmptyColumns":false,"cursorPosition":{"lineNumber":91,"column":1}}],"tabInContext":"4132b5fb-4db1-47ad-8f57-58c08309e86b","connections":{"trd-21p215vdaeysn27sv9.z3":{"clusterType":"Engine","name":"trd-21p215vdaeysn27sv9.z3","connectionString":"https://trd-21p215vdaeysn27sv9.z3.kusto.fabric.microsoft.com","initialCatalog":"1cebe6db-ac4b-47b6-a667-b4b18a7ab054","databases":{"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054":{"id":"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054","name":"1cebe6db-ac4b-47b6-a667-b4b18a7ab054","prettyName":"ai-observability-demo-eventhouse","fetchState":"notStarted","fetchStateError":"","tables":{},"functions":{},"entityGroups":{},"accessMode":"ReadWrite","minorVersion":1,"majorVersion":30}},"id":"trd-21p215vdaeysn27sv9.z3","fetchState":"done","fetchStateError":"","tooBigToCache":true,"serviceOffering":"Trident"}}}}