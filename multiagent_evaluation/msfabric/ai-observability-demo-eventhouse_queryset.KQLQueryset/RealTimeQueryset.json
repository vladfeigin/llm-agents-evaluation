{"payload":{"tabs":[{"id":"2887837c-ac41-4434-9aff-f5d95430f682","queryRange":{"startLineNumber":169,"startColumn":1,"endLineNumber":240,"endColumn":1},"title":"misc","text":"//-------------------------------------------------\n// Misc. Queries \n//-------------------------------------------------\n\nopentel_traces\n| mv-expand records \n| where todatetime(records.['time']) >= todatetime(\"2025-01-04\")\n| where records.Type == \"AppTraces\"\n| extend parsed_message = parse_json(records.Message) \n| summarize count() by tostring(records.Type)\n\n\nopentel_traces\n| mv-expand records \n| where todatetime(records.['time']) >= todatetime(\"2025-01-04\")\n| where records.Type == \"AppDependencies\"\n| extend properties = records.Properties\n| summarize count() by tostring(properties.span_type)\n\n// ---------------------------------------------------\n// Search details \n//----------------------------------------------------\n\nopentel_traces\n| mv-expand records \n| where todatetime(tostring(records.['time'])) >= todatetime(\"2025-01-04\")\n| where records.Target == 'retrieve_documents.task'\n| where records.Type == \"AppDependencies\"\n| extend EventTime = todatetime(records.['time'])\n| extend OperationId = records.OperationId\n| extend ParentId = records.ParentId\n| extend properties = records.Properties\n| extend duration = records.DurationMs\n| extend searchInput = properties.['traceloop.entity.input']\n| extend searchOutput = properties.['traceloop.entity.output']\n\n\n\n//-------------------------------------\n//Ongoing\n// ------------------------------------\n\n\n# ongoing, includes user intent calls to openai when there is a history (every question generate 2 call, except very first one), also we include embeddings tokens \nopentel_traces\n| mv-expand records \n| where todatetime(records.['time']) >= todatetime(\"2025-01-04\")\n| where records.Type == \"AppDependencies\"\n| extend properties = records.Properties\n| where properties.span_type in ('LLM', \"Embedding\") \n| where properties.function in ('openai.resources.chat.completions.Completions.create', 'openai.resources.embeddings.Embeddings.create')\n| extend model_name = properties.['llm.response.model']\n| extend operation_id = records.OperationId\n| extend parent_id = records.ParentId\n| extend inputs = properties.inputs\n| extend output = properties['llm.generated_message']\n| extend ch = properties.output\n| sort by EventProcessedUtcTime\n\n\n\n// #######################################################\n// Check Ongoing Application Usage\n// ########################################################\n\nOngoingUsage \n| where EventTime >= todatetime(\"2025-01-04\")\n| sort by EventTime\n\nApplicationDetails\n| where EventTime >= todatetime(\"2025-01-04\")\n|  sort by EventTime\n\n\n.set-or-replace ApplicationUsage <|\nApplicationDetails\n| join OngoingUsage on OperationId\n|project \n    EventTime,\n    OperationId,\n    ParentId,\n    ApplicationName,\n    ApplicationVersion,\n    SessionId,\n    ConfigVersion,\n    Duration,\n    Success,\n    Prompt,\n    Output,\n    TotalTokens,\n    PromptTokens,\n    CompletionTokens,\n    ModelName, \n    Deployment\n\nApplicationUsage\n| where EventTime >= todatetime(\"2025-01-04\")\n| sort by EventTime\n\n\n\n// #######################################################\n// evaluation metrics  (via logs)\n// ########################################################\n\nopentel_traces\n| mv-expand records \n| where todatetime(records.['time']) >= todatetime(\"2025-01-04\")\n| where records.Type == \"AppTraces\"\n| extend message = records.Message\n| where message contains \"batch-evaluation-flow-raw\"\n\n\nopentel_traces\n| mv-expand records \n| where todatetime(records.['time']) >= todatetime(\"2025-01-04\")\n| where records.Type == \"AppTraces\"\n| extend message = records.Message\n| where message contains \"batch-evaluation-flow-metrics\"\n\n\n// looking at specific operation \nOngoingUsage\n| where OperationId == '261f951b-bed1-d882-cfda-0141930f6379'\n| sort by EventTime\n\n// same operation is in corresponding search \nSearchDetails\n| where OperationId == '261f951b-bed1-d882-cfda-0141930f6379'\n| sort by EventTime\n\n\n\nEvaluationMetrics | \nextend PerformanceScore = Coherence + Groundedness + Relevance + Similarity | \nsummarize avgPerformanceScore=avg(PerformanceScore) by ConfigVersion | \ntop 5 by avgPerformanceScore desc\n\n\nEvaluationMetrics \n| extend PerformanceScore = Coherence + Groundedness + Relevance + Similarity \n| summarize avgPerformanceScore=avg(PerformanceScore) by ConfigVersion \n| extend avgPerformanceScore = round(avgPerformanceScore, 3) \n| top 5 by avgPerformanceScore desc\n\n\n\nlet AppTracesTbl = \n        opentel_traces\n        | extend item = parse_json(records)\n        | mv-expand item\n        | where item.Type == \"AppTraces\" \n        | project\n            EventProcessedUtcTime,\n            item;\n     AppTracesTbl\n    | project\n        EventTime = todatetime((item)[\"time\"]),\n        OperationId = toguid(item.OperationId),\n        ParentId = tostring(item.ParentId),\n        Message = dynamic_to_json(item.Message)\n    | where Message has \"batch-evaluation-flow-metrics\"\n    | extend parsed_json = parse_json(Message)\n    | where EventTime >= todatetime(\"2025-01-18\")\n   \n\n\n\n   let AppTracesTbl = \n        opentel_traces\n        | extend item = parse_json(records)\n        | mv-expand item\n        | where item.Type == \"AppTraces\" \n        | project\n            EventProcessedUtcTime,\n            item;\n     AppTracesTbl\n    | project\n        EventTime = todatetime((item)[\"time\"]),\n        OperationId = toguid(item.OperationId),\n        ParentId = tostring(item.ParentId),\n        Message = dynamic_to_json(item.Message)\n    | where Message has \"batch-evaluation-flow-metrics\"\n    | extend parsed_json = parse_json(Message)\n    | where EventTime >= todatetime(\"2025-01-18\")\n    | extend \n        AgentName = tostring(parsed_json.metadata.AgentConfiguration.agent_name),\t\t\n        ConfigVersion = tostring(parsed_json.metadata.AgentConfiguration.config_version),\n        ModelName = tostring(parsed_json.metadata.AgentConfiguration.deployment.model_name),\n        ModelVersion = tostring(parsed_json.metadata.AgentConfiguration.deployment.model_version),\n        ModelDeploymentName = tostring(parsed_json.metadata.AgentConfiguration.deployment.name),\n        OpenAIAPIVersion = tostring(parsed_json.metadata.AgentConfiguration.deployment.openai_api_version),\n        IntentSystemPrompt = tostring(parsed_json.metadata.AgentConfiguration.intent_system_prompt),\n        ChatSystemPrompt = tostring(parsed_json.metadata.AgentConfiguration.chat_system_prompt),\n        Deployment = tostring(parsed_json.metadata.AgentConfiguration.deployment.endpoint),\n        Temperature = tostring(parsed_json.metadata.AgentConfiguration.model_parameters.temperature),\n        Seed = tolong(parsed_json.metadata.AgentConfiguration.model_parameters.seed),\n        EmbeddingEndpoint = tostring(parsed_json.metadata.AgentConfiguration.retrieval.deployment.endpoint),\n        EmbeddingDeployment = tostring(parsed_json.metadata.AgentConfiguration.retrieval.deployment.name),\n        SearchType = tostring(parsed_json.metadata.AgentConfiguration.retrieval.parameters.search_type),\n        SearchTopK = tolong(parsed_json.metadata.AgentConfiguration.retrieval.parameters.top_k),\n        TotalTokens = tolong(parsed_json.metadata.properties.system_metrics.total_tokens),\n        PromptTokens = tolong(parsed_json.metadata.properties.system_metrics.prompt_tokens),\n        CompletionTokens = tolong(parsed_json.metadata.properties.system_metrics.completion_tokens),\n        Duration = tolong(parsed_json.metadata.properties.system_metrics.duration)       \n    | where isnotempty(AgentName)         \n    | mv-expand result = parsed_json.result\n    | extend metric = tostring(result.metric), score = toreal(result.score)\n    | project-away Message, parsed_json, result\n    | evaluate pivot(metric, any(score))\n    | sort by EventTime asc\n    | project\n        EventTime,\n        OperationId,\n        ParentId,\n        AgentName,\n        ConfigVersion,\n        ModelName,\n        ModelVersion,\n        ModelDeploymentName,\n        OpenAIAPIVersion,\n        Deployment,\n        TotalTokens,\n        PromptTokens,\n        CompletionTokens,\n        Duration,\n        Temperature,\n        Seed,\n        EmbeddingEndpoint,\n        EmbeddingDeployment,\n        SearchType,\n        SearchTopK,\n        IntentSystemPrompt,\n        ChatSystemPrompt,\n        Coherence = coherence,\n        Groundedness = groundedness,\n        Relevance = relevance,\n        Similarity = similarity\n\n\n\n\n\n\n        let AppTracesTbl = \n        opentel_traces\n        | extend item = parse_json(records)\n        | mv-expand item\n        | where item.Type == \"AppTraces\" \n        | project\n            EventProcessedUtcTime,\n            item;\n     AppTracesTbl\n    | project\n        EventTime = todatetime((item)[\"time\"]),\n        OperationId = toguid(item.OperationId),\n        ParentId = tostring(item.ParentId),\n        Message = dynamic_to_json(item.Message)\n    | where Message has \"batch-evaluation-flow-raw\"\n    | where EventTime >= todatetime(\"2025-01-18\")\n    | extend parsed_json = parse_json(Message)\n    | mv-expand result = parsed_json.result\n    | where result contains \"question\"\n    | extend \n        SessionId = tostring(result[\"session_id\"]),\n        Question = tostring(result[\"question\"]),\n        GroundTruth = tostring(result[\"answer\"]),\n        Context = tostring(result[\"context\"]),\n        ModelAnswer = tostring(result[\"outputs.output\"]),\n        Relevance = tolong(result[\"relevance\"]),\n        Groundedness = tolong(result[\"groundedness\"]),\n        Similarity = tolong(result[\"similarity\"]),\n        Coherence = tolong(result[\"coherence\"]),\n        EvaluationDataSet = tostring(parsed_json.metadata.data),\n        EvaluationPortalUrl = tostring(parsed_json.metadata.portal_url)    \n    | project-away result,Message, parsed_json ","commandInContext":"   let AppTracesTbl = \n        opentel_traces\n        | extend item = parse_json(records)\n        | mv-expand item\n        | where item.Type == \"AppTraces\" \n        | project\n            EventProcessedUtcTime,\n            item;\n     AppTracesTbl\n    | project\n        EventTime = todatetime((item)[\"time\"]),\n        OperationId = toguid(item.OperationId),\n        ParentId = tostring(item.ParentId),\n        Message = dynamic_to_json(item.Message)\n    | where Message has \"batch-evaluation-flow-metrics\"\n    | extend parsed_json = parse_json(Message)\n    | where EventTime >= todatetime(\"2025-01-18\")\n    | extend \n        AgentName = tostring(parsed_json.metadata.AgentConfiguration.agent_name),\t\t\n        ConfigVersion = tostring(parsed_json.metadata.AgentConfiguration.config_version),\n        ModelName = tostring(parsed_json.metadata.AgentConfiguration.deployment.model_name),\n        ModelVersion = tostring(parsed_json.metadata.AgentConfiguration.deployment.model_version),\n        ModelDeploymentName = tostring(parsed_json.metadata.AgentConfiguration.deployment.name),\n        OpenAIAPIVersion = tostring(parsed_json.metadata.AgentConfiguration.deployment.openai_api_version),\n        IntentSystemPrompt = tostring(parsed_json.metadata.AgentConfiguration.intent_system_prompt),\n        ChatSystemPrompt = tostring(parsed_json.metadata.AgentConfiguration.chat_system_prompt),\n        Deployment = tostring(parsed_json.metadata.AgentConfiguration.deployment.endpoint),\n        Temperature = tostring(parsed_json.metadata.AgentConfiguration.model_parameters.temperature),\n        Seed = tolong(parsed_json.metadata.AgentConfiguration.model_parameters.seed),\n        EmbeddingEndpoint = tostring(parsed_json.metadata.AgentConfiguration.retrieval.deployment.endpoint),\n        EmbeddingDeployment = tostring(parsed_json.metadata.AgentConfiguration.retrieval.deployment.name),\n        SearchType = tostring(parsed_json.metadata.AgentConfiguration.retrieval.parameters.search_type),\n        SearchTopK = tolong(parsed_json.metadata.AgentConfiguration.retrieval.parameters.top_k),\n        TotalTokens = tolong(parsed_json.metadata.properties.system_metrics.total_tokens),\n        PromptTokens = tolong(parsed_json.metadata.properties.system_metrics.prompt_tokens),\n        CompletionTokens = tolong(parsed_json.metadata.properties.system_metrics.completion_tokens),\n        Duration = tolong(parsed_json.metadata.properties.system_metrics.duration)       \n    | where isnotempty(AgentName)         \n    | mv-expand result = parsed_json.result\n    | extend metric = tostring(result.metric), score = toreal(result.score)\n    | project-away Message, parsed_json, result\n    | evaluate pivot(metric, any(score))\n    | sort by EventTime asc\n    | project\n        EventTime,\n        OperationId,\n        ParentId,\n        AgentName,\n        ConfigVersion,\n        ModelName,\n        ModelVersion,\n        ModelDeploymentName,\n        OpenAIAPIVersion,\n        Deployment,\n        TotalTokens,\n        PromptTokens,\n        CompletionTokens,\n        Duration,\n        Temperature,\n        Seed,\n        EmbeddingEndpoint,\n        EmbeddingDeployment,\n        SearchType,\n        SearchTopK,\n        IntentSystemPrompt,\n        ChatSystemPrompt,\n        Coherence = coherence,\n        Groundedness = groundedness,\n        Relevance = relevance,\n        Similarity = similarity\n\n","executionStatus":"done","clientRequestId":"Kusto.Web.RTA.QuerySet;b31240cd-8348-4397-8bea-5b2fe86949d1;61c35c16-8fbb-4b67-a580-f258c7047f21","entityInContext":"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054","commandType":"Query","commandWithoutLeadingComments":"   let AppTracesTbl = \n        opentel_traces\n        | extend item = parse_json(records)\n        | mv-expand item\n        | where item.Type == \"AppTraces\" \n        | project\n            EventProcessedUtcTime,\n            item;\n     AppTracesTbl\n    | project\n        EventTime = todatetime((item)[\"time\"]),\n        OperationId = toguid(item.OperationId),\n        ParentId = tostring(item.ParentId),\n        Message = dynamic_to_json(item.Message)\n    | where Message has \"batch-evaluation-flow-metrics\"\n    | extend parsed_json = parse_json(Message)\n    | where EventTime >= todatetime(\"2025-01-18\")\n    | extend \n        AgentName = tostring(parsed_json.metadata.AgentConfiguration.agent_name),\t\t\n        ConfigVersion = tostring(parsed_json.metadata.AgentConfiguration.config_version),\n        ModelName = tostring(parsed_json.metadata.AgentConfiguration.deployment.model_name),\n        ModelVersion = tostring(parsed_json.metadata.AgentConfiguration.deployment.model_version),\n        ModelDeploymentName = tostring(parsed_json.metadata.AgentConfiguration.deployment.name),\n        OpenAIAPIVersion = tostring(parsed_json.metadata.AgentConfiguration.deployment.openai_api_version),\n        IntentSystemPrompt = tostring(parsed_json.metadata.AgentConfiguration.intent_system_prompt),\n        ChatSystemPrompt = tostring(parsed_json.metadata.AgentConfiguration.chat_system_prompt),\n        Deployment = tostring(parsed_json.metadata.AgentConfiguration.deployment.endpoint),\n        Temperature = tostring(parsed_json.metadata.AgentConfiguration.model_parameters.temperature),\n        Seed = tolong(parsed_json.metadata.AgentConfiguration.model_parameters.seed),\n        EmbeddingEndpoint = tostring(parsed_json.metadata.AgentConfiguration.retrieval.deployment.endpoint),\n        EmbeddingDeployment = tostring(parsed_json.metadata.AgentConfiguration.retrieval.deployment.name),\n        SearchType = tostring(parsed_json.metadata.AgentConfiguration.retrieval.parameters.search_type),\n        SearchTopK = tolong(parsed_json.metadata.AgentConfiguration.retrieval.parameters.top_k),\n        TotalTokens = tolong(parsed_json.metadata.properties.system_metrics.total_tokens),\n        PromptTokens = tolong(parsed_json.metadata.properties.system_metrics.prompt_tokens),\n        CompletionTokens = tolong(parsed_json.metadata.properties.system_metrics.completion_tokens),\n        Duration = tolong(parsed_json.metadata.properties.system_metrics.duration)       \n    | where isnotempty(AgentName)         \n    | mv-expand result = parsed_json.result\n    | extend metric = tostring(result.metric), score = toreal(result.score)\n    | project-away Message, parsed_json, result\n    | evaluate pivot(metric, any(score))\n    | sort by EventTime asc\n    | project\n        EventTime,\n        OperationId,\n        ParentId,\n        AgentName,\n        ConfigVersion,\n        ModelName,\n        ModelVersion,\n        ModelDeploymentName,\n        OpenAIAPIVersion,\n        Deployment,\n        TotalTokens,\n        PromptTokens,\n        CompletionTokens,\n        Duration,\n        Temperature,\n        Seed,\n        EmbeddingEndpoint,\n        EmbeddingDeployment,\n        SearchType,\n        SearchTopK,\n        IntentSystemPrompt,\n        ChatSystemPrompt,\n        Coherence = coherence,\n        Groundedness = groundedness,\n        Relevance = relevance,\n        Similarity = similarity\n\n","hideEmptyColumns":false,"cursorPosition":{"lineNumber":238,"column":32}},{"id":"905667a3-9829-4f0b-9de1-df1a43d3fc00","queryRange":{"startLineNumber":73,"startColumn":1,"endLineNumber":76,"endColumn":1},"title":"create_evaluation_metrics_table","text":".create-or-alter function EvaluationMetricsFlowInsert() {\n     let AppTracesTbl = \n        opentel_traces\n        | extend item = parse_json(records)\n        | mv-expand item\n        | where item.Type == \"AppTraces\" \n        | project\n            EventProcessedUtcTime,\n            item;\n     AppTracesTbl\n    | project\n        EventTime = todatetime((item)[\"time\"]),\n        OperationId = toguid(item.OperationId),\n        ParentId = tostring(item.ParentId),\n        Message = dynamic_to_json(item.Message)\n    | where Message has \"batch-evaluation-flow-metrics\"\n    | extend parsed_json = parse_json(Message)\n    | extend \n        AgentName = tostring(parsed_json.metadata.AgentConfiguration.agent_name),\t\t\n        ConfigVersion = tostring(parsed_json.metadata.AgentConfiguration.config_version),\n        ModelName = tostring(parsed_json.metadata.AgentConfiguration.deployment.model_name),\n        ModelVersion = tostring(parsed_json.metadata.AgentConfiguration.deployment.model_version),\n        ModelDeploymentName = tostring(parsed_json.metadata.AgentConfiguration.deployment.name),\n        OpenAIAPIVersion = tostring(parsed_json.metadata.AgentConfiguration.deployment.openai_api_version),\n        IntentSystemPrompt = tostring(parsed_json.metadata.AgentConfiguration.intent_system_prompt),\n        ChatSystemPrompt = tostring(parsed_json.metadata.AgentConfiguration.chat_system_prompt),\n        Deployment = tostring(parsed_json.metadata.AgentConfiguration.deployment.endpoint),\n        Temperature = tostring(parsed_json.metadata.AgentConfiguration.model_parameters.temperature),\n        Seed = tolong(parsed_json.metadata.AgentConfiguration.model_parameters.seed),\n        EmbeddingEndpoint = tostring(parsed_json.metadata.AgentConfiguration.retrieval.deployment.endpoint),\n        EmbeddingDeployment = tostring(parsed_json.metadata.AgentConfiguration.retrieval.deployment.name),\n        SearchType = tostring(parsed_json.metadata.AgentConfiguration.retrieval.parameters.search_type),\n        SearchTopK = tolong(parsed_json.metadata.AgentConfiguration.retrieval.parameters.top_k) \n    | where isnotempty(AgentName)         \n    | mv-expand result = parsed_json.result\n    | extend metric = tostring(result.metric), score = toreal(result.score)\n    | project-away Message, parsed_json, result\n    | evaluate pivot(metric, any(score))\n    | sort by EventTime asc\n    | project\n        EventTime,\n        OperationId,\n        ParentId,\n        AgentName,\n        ConfigVersion,\n        ModelName,\n        ModelVersion,\n        ModelDeploymentName,\n        OpenAIAPIVersion,\n        Deployment,\n        Temperature,\n        Seed,\n        EmbeddingEndpoint,\n        EmbeddingDeployment,\n        SearchType,\n        SearchTopK,\n        IntentSystemPrompt,\n        ChatSystemPrompt,\n        Coherence = coherence,\n        Groundedness = groundedness,\n        Relevance = relevance,\n        Similarity = similarity\n }\n   \n \n   .create table \n    EvaluationMetrics (EventTime: datetime, OperationId: guid, ParentId: string, AgentName: string, ConfigVersion: string, ModelName: string, ModelVersion: string, ModelDeploymentName: string, OpenAIAPIVersion: string,\n    Deployment: string, Temperature: string, Seed: long, EmbeddingEndpoint:string, EmbeddingDeployment: string, SearchType: string, SearchTopK: long, IntentSystemPrompt: string, ChatSystemPrompt: string,\n    Coherence: real, Groundedness: real, Relevance: real, Similarity: real)\n\n//.drop table EvaluationMetrics\n\n.alter table EvaluationMetrics policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"opentel_traces\", \"Query\": \"EvaluationMetricsFlowInsert()\", \"IsTransactional\": true}]'\n\n.set-or-append EvaluationMetrics <|\n    EvaluationMetricsFlowInsert()\n\n\nEvaluationMetrics | take 10\n\n","commandInContext":".alter table EvaluationMetrics policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"opentel_traces\", \"Query\": \"EvaluationMetricsFlowInsert()\", \"IsTransactional\": true}]'\n\n","executionStatus":"done","clientRequestId":"Kusto.Web.RTA.QuerySet;b31240cd-8348-4397-8bea-5b2fe86949d1;b137e414-2ad7-4753-8101-bc733a1034d8","entityInContext":"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054","commandType":"AdminCommand","commandWithoutLeadingComments":".alter table EvaluationMetrics policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"opentel_traces\", \"Query\": \"EvaluationMetricsFlowInsert()\", \"IsTransactional\": true}]'","hideEmptyColumns":false,"cursorPosition":{"lineNumber":73,"column":1}},{"id":"e2163182-c388-48fe-ba4a-8500eb2fd1f5","queryRange":{"startLineNumber":41,"startColumn":1,"endLineNumber":44,"endColumn":1},"title":"create_evaluation_raw_table","text":".create-or-alter function EvaluationRawFlowInsert() {\n     let AppTracesTbl = \n        opentel_traces\n        | extend item = parse_json(records)\n        | mv-expand item\n        | where item.Type == \"AppTraces\" \n        | project\n            EventProcessedUtcTime,\n            item;\n     AppTracesTbl\n    | project\n        EventTime = todatetime((item)[\"time\"]),\n        OperationId = toguid(item.OperationId),\n        ParentId = tostring(item.ParentId),\n        Message = dynamic_to_json(item.Message)\n    | where Message has \"batch-evaluation-flow-raw\"\n    | extend parsed_json = parse_json(Message)\n    | mv-expand result = parsed_json.result\n    | where result contains \"question\"\n    | extend \n        SessionId = tostring(result[\"session_id\"]),\n        Question = tostring(result[\"question\"]),\n        GroundTruth = tostring(result[\"answer\"]),\n        Context = tostring(result[\"context\"]),\n        ModelAnswer = tostring(result[\"outputs.output\"]),\n        Relevance = tolong(result[\"relevance\"]),\n        Groundedness = tolong(result[\"groundedness\"]),\n        Similarity = tolong(result[\"similarity\"]),\n        Coherence = tolong(result[\"coherence\"])\n    | project-away result,Message, parsed_json   \n }\n   \n \n   .create table EvaluationRaw\n    (   EventTime: datetime, OperationId: guid, ParentId: string, SessionId:string, Question:string , GroundTruth:string , Context:string ,ModelAnswer:string , \n    Relevance:long ,Groundedness:long , Similarity:long ,Coherence:long \n)\n\n#.drop table EvaluationRaw\n\n.alter table EvaluationRaw policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"opentel_traces\", \"Query\": \"EvaluationRawFlowInsert()\", \"IsTransactional\": true}]'\n\n.set-or-append EvaluationRaw <|\n    EvaluationRawFlowInsert()\n\n\nEvaluationRaw | take 10\n\n","commandInContext":".alter table EvaluationRaw policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"opentel_traces\", \"Query\": \"EvaluationRawFlowInsert()\", \"IsTransactional\": true}]'\n\n","executionStatus":"gotFromCache","clientRequestId":"Kusto.Web.RTA.QuerySet;b31240cd-8348-4397-8bea-5b2fe86949d1;0649d826-6b0d-4118-8c08-f0e502714ad0","entityInContext":"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054","commandType":"AdminCommand","commandWithoutLeadingComments":".alter table EvaluationRaw policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"opentel_traces\", \"Query\": \"EvaluationRawFlowInsert()\", \"IsTransactional\": true}]'","hideEmptyColumns":false,"cursorPosition":{"lineNumber":42,"column":54}},{"id":"4132b5fb-4db1-47ad-8f57-58c08309e86b","queryRange":{"startLineNumber":47,"startColumn":1,"endLineNumber":66,"endColumn":1},"title":"create_ongoing_monitoring_table","text":"     //--  ongoing usage details\n\n      .create-or-alter function OngoingUsageInsert() {   \n        let ongoing_expanded_table=\n        traces\n        | mv-expand records \n        | where records.Type == 'AppDependencies';\n        ongoing_expanded_table\n        | project\n            EventTime = todatetime((records)[\"time\"]),\n            OperationId = toguid(records.OperationId),\n            ParentId = toguid(records.ParentId),\n            records\n        | extend properties = records.Properties\n        | where properties.span_type in ('LLM', \"Embedding\") \n        | where properties.function in ('openai.resources.chat.completions.Completions.create', 'openai.resources.embeddings.Embeddings.create')\n        | extend Success = tostring(records.Success)\n        | extend Duration = toint(records.DurationMs)\n        | extend ModelName = tostring (properties.['llm.response.model'])\n        | extend Prompt = properties.inputs\n        | extend Output = properties['llm.generated_message']\n        | extend TotalTokens = toint(properties[\"llm.usage.total_tokens\"])\n        | extend PromptTokens = toint(properties[\"llm.usage.prompt_tokens\"])\n        | extend CompletionTokens = toint(properties[\"llm.usage.completion_tokens\"])\n        | project EventTime, OperationId, ParentId, Success, Duration, Prompt, Output, ModelName, TotalTokens, PromptTokens, CompletionTokens\n      }\n  \n\n  \n    .create table \n    OngoingUsage(EventTime: datetime, OperationId: guid, ParentId: guid , Success: string,  Duration:int,  Prompt:dynamic , Output:dynamic , ModelName: string , TotalTokens:int, PromptTokens:int, CompletionTokens:int)\n\n\n.alter table OngoingUsage policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"traces\", \"Query\": \"OngoingUsageInsert()\", \"IsTransactional\": true}]'\n\n.set-or-append OngoingUsage <|\n    OngoingUsageInsert()\n\nOngoingUsage\n\n\n\n\n//-  --- application details \n\n      .create-or-alter function ApplicationDetailsInsert() {   \n        let ongoing_appl_expanded_table=\n         traces\n        | mv-expand records \n        | where records.Type == 'AppDependencies';\n        ongoing_appl_expanded_table\n        | project\n            EventTime = todatetime(records[\"time\"]),\n            OperationId = toguid(records.OperationId),\n            ParentId = tostring(records.ParentId),\n        records\n        | where records.Target == \"RAG.__chat__\" \n        | extend ApplicationName = tostring(records.Properties.application_name)\n        | extend ApplicationVersion = tostring(records.Properties.application_version)\n        | extend SessionId = tostring(records.Properties.session_id)\n        | extend ConfigVersion = tostring(records.Properties.config_version)\n        | extend Deployment = tostring(records.Properties.endpoint)\n        | project EventTime, OperationId, ParentId, ApplicationName, ApplicationVersion, SessionId, ConfigVersion, Deployment}\n\n     \n    .create table \n    ApplicationDetails (EventTime: datetime, OperationId: guid, ParentId: string, ApplicationName:string , ApplicationVersion:string ,SessionId:string , ConfigVersion:string, Deployment:string ) \n\n.alter table ApplicationDetails policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"traces\", \"Query\": \"ApplicationDetailsInsert()\", \"IsTransactional\": true}]'\n\n.set-or-append ApplicationDetails <|\n    ApplicationDetailsInsert()   \n\nApplicationDetails\n\n\n// create a join table\n\n.set-or-replace ApplicationUsage <|\nApplicationDetails\n| join OngoingUsage on OperationId\n|project \n    EventTime,\n    OperationId,\n    ParentId,\n    ApplicationName,\n    ApplicationVersion,\n    SessionId,\n    ConfigVersion,\n    Duration,\n    Success,\n    Prompt,\n    Output,\n    TotalTokens,\n    PromptTokens,\n    CompletionTokens,\n    ModelName, \n    Deployment\n\nApplicationUsage\n\n\n\n","commandInContext":"toguid","executionStatus":"done","clientRequestId":"Kusto.Web.RTA.QuerySet;b31240cd-8348-4397-8bea-5b2fe86949d1;8e70703f-a3fc-4bc2-8fde-fd74dd2bd8c2","completionInfo":-1917387756,"entityInContext":"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054","commandType":"Query","commandWithoutLeadingComments":"toguid","hideEmptyColumns":false,"cursorPosition":{"lineNumber":55,"column":33}},{"id":"5de813cc-0a97-47b8-b6d7-db4714cda0f2","queryRange":{"startLineNumber":20,"startColumn":1,"endLineNumber":22,"endColumn":1},"title":"create_search_details_table","text":".create-or-alter function SearchDetailsInsert() {   \n        let search_details_table=\n        opentel_traces\n        | mv-expand records \n        | where records.Target == 'retrieve_documents.task'\n        | where records.Type == 'AppDependencies';\n        search_details_table\n        | project\n            EventTime = todatetime((records)[\"time\"]),\n            OperationId = toguid(records.OperationId),\n            ParentId = tostring(records.ParentId),\n            records\n        | extend properties = records.Properties\n        | extend DurationMs = toint(records.DurationMs)\n        | extend SearchInput = properties.['traceloop.entity.input']\n        | extend SearchOutput = properties.['traceloop.entity.output']\n        | project EventTime, OperationId, ParentId, DurationMs, SearchInput, SearchOutput\n      }\n\n    .create table SearchDetails (EventTime: datetime, OperationId: guid, ParentId: string, DurationMs:int, SearchInput:dynamic , SearchOutput:dynamic )\n\n\n    .alter table SearchDetails policy update\n    @'[{ \"IsEnabled\": true, \"Source\": \"opentel_traces\", \"Query\": \"SearchDetailsInsert()\", \"IsTransactional\": true}]'\n\n.set-or-append SearchDetails <|\n    SearchDetailsInsert()\n\n\nSearchDetailsInsert","commandInContext":"    .create table SearchDetails (EventTime: datetime, OperationId: guid, ParentId: string, DurationMs:int, SearchInput:dynamic , SearchOutput:dynamic )\n\n","executionStatus":"gotFromCache","clientRequestId":"Kusto.Web.RTA.QuerySet;b31240cd-8348-4397-8bea-5b2fe86949d1;da336640-8fdc-4d24-8e82-ba1fd645db62","entityInContext":"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054","commandType":"AdminCommand","commandWithoutLeadingComments":".create table SearchDetails (EventTime: datetime, OperationId: guid, ParentId: string, DurationMs:int, SearchInput:dynamic , SearchOutput:dynamic )","hideEmptyColumns":false,"cursorPosition":{"lineNumber":20,"column":152}}],"tabInContext":"5de813cc-0a97-47b8-b6d7-db4714cda0f2","connections":{"trd-21p215vdaeysn27sv9.z3":{"clusterType":"Engine","name":"trd-21p215vdaeysn27sv9.z3","connectionString":"https://trd-21p215vdaeysn27sv9.z3.kusto.fabric.microsoft.com","initialCatalog":"1cebe6db-ac4b-47b6-a667-b4b18a7ab054","databases":{"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054":{"id":"trd-21p215vdaeysn27sv9.z3/1cebe6db-ac4b-47b6-a667-b4b18a7ab054","name":"1cebe6db-ac4b-47b6-a667-b4b18a7ab054","prettyName":"ai-observability-demo-eventhouse","fetchState":"notStarted","fetchStateError":"","tables":{},"functions":{},"entityGroups":{},"accessMode":"ReadWrite","minorVersion":14,"majorVersion":196}},"id":"trd-21p215vdaeysn27sv9.z3","fetchState":"done","fetchStateError":"","tooBigToCache":true,"serviceOffering":"Trident"}}}}