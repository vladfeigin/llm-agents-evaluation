     //--  open ai chat details

      .create-or-alter function OngoingFlowInsert_chat() {   
        let ongoing_expanded_table=
        ongoing_raw_table
        | extend item = (records)
        | mv-expand item
        | serialize
        | where todatetime(EventEnqueuedUtcTime)>= todatetime('2024-12-07')
        | where item.Type == 'AppDependencies'
        | project     
            EventProcessedUtcTime,
            item,
            Target = item.Target,
            Type = item.Type;
        ongoing_expanded_table
        | project
        item_time = todatetime((item)["time"]),
        target = Target,
        operation_id = toguid(item.OperationId),
        item
        | where target == "openai_chat" 
        | extend parsed_item = parse_json(item)
        | extend duration = toint(parsed_item.DurationMs)
        | extend success = tostring(parsed_item.Success)
        | extend prompt = parsed_item.Properties.inputs
        | extend generated_message = parsed_item.Properties.["llm.generated_message"]
        | extend total_tokens = toint(parsed_item.Properties.["llm.usage.total_tokens"])
        | extend prompt_tokens = toint(parsed_item.Properties.["llm.usage.prompt_tokens"])
        | extend completion_tokens = toint(parsed_item.Properties.["llm.usage.completion_tokens"])
        | extend lm_model = tostring(parsed_item.Properties["llm.response.model"])
        | project item_time, operation_id, duration, success, prompt, generated_message,total_tokens, prompt_tokens, completion_tokens,lm_model
      }


    .create table 
    OngoingChatFlow (item_time: datetime, operation_id: guid, duration:int , success: string  , prompt:dynamic , generated_message:dynamic ,total_tokens:int, prompt_tokens:int, completion_tokens:int, lm_model:string)


.alter table OngoingChatFlow policy update
    @'[{ "IsEnabled": true, "Source": "ongoing_raw_table", "Query": "OngoingFlowInsert_chat()", "IsTransactional": true}]'

.set-or-append OngoingChatFlow <|
    OngoingFlowInsert_chat()


//-  --- application details 

      .create-or-alter function OngoingFlowInsert_appl() {   
        let ongoing_appl_expanded_table=
        ongoing_raw_table
        | extend item = (records)
        | mv-expand item
        | serialize
        | where todatetime(EventEnqueuedUtcTime)>= todatetime('2024-12-07')
        | where item.Type == 'AppDependencies'
        | project     
            EventProcessedUtcTime,
            item,
            Target = item.Target,
            Type = item.Type;
        ongoing_appl_expanded_table
        | project
        item_time = todatetime(item["time"]),
        target = Target,
        operation_id = toguid(item.OperationId),
        item
        | where target == "RAG.__chat__" 
        | extend parsed_item = parse_json(item)
        | extend application_name = tostring(parsed_item.Properties.application_name)
        | extend application_version = tostring(parsed_item.Properties.application_version)
        | extend session_id = tostring(parsed_item.Properties.session_id)
        | extend config_version = tostring(parsed_item.Properties.config_version)
        | extend deployment = tostring(parsed_item.Properties.endpoint)
        | project item_time, operation_id, application_name, application_version, session_id, config_version,deployment
      }


    .create table 
    OngoingApplicationFlow (item_time: datetime, operation_id: guid, application_name:string , application_version:string ,session_id:string , config_version:string, deployment:string ) 

.alter table OngoingApplicationFlow policy update
    @'[{ "IsEnabled": true, "Source": "ongoing_raw_table", "Query": "OngoingFlowInsert_appl()", "IsTransactional": true}]'

.set-or-append OngoingApplicationFlow <|
    OngoingFlowInsert_appl()   


// create a join table

#.drop table OngoingChatApplicationFlow

.set-or-replace OngoingChatApplicationFlow <|
OngoingApplicationFlow
| join OngoingChatFlow on operation_id
|project 
    item_time,
    operation_id,
    application_name,
    application_version,
    session_id,
    config_version,
    duration,
    success,
    prompt,
    generated_message,
    total_tokens,
    prompt_tokens,
    completion_tokens,
    lm_model, 
    deployment





