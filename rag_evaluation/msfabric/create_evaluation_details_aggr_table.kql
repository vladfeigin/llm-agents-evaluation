
//evaluation detailed results 
.create-or-alter function EvaluationDetailsFunction() {
 let AppTracesTbl = 
        traces_table
        | extend item = parse_json(records)
        | mv-expand item
        | serialize
        | where item.Type == "AppTraces" 
        | where todatetime(EventProcessedUtcTime) >= todatetime ("2024-12-09")
        | project
            EventProcessedUtcTime,
            item;
     AppTracesTbl
    | project
        item_time = todatetime((item)["time"]),
        operation_id = toguid(item.OperationId),
        parent_id = tostring(item.ParentId),
        messages = dynamic_to_json(item.Message)
    | where messages has "batch-evaluation-flow"
    | extend parsed_json = parse_json(messages)
    | mv-expand result = parsed_json.result
    | project-away messages, parsed_json
    | where result contains "inputs.session_id"
    | extend 
    session_id = tostring(result["inputs.session_id"]),
    question = tostring(result["inputs.question"]),
    ground_truth = tostring(result["inputs.answer"]),
    context = tostring(result["inputs.context"]),
    model_answer = tostring(result["outputs.output"]),
    relevance_score = tolong(result["relevance"]),
    groundedness_score = tolong(result["groundedness"]),
    similarity_score = tolong(result["similarity"]),
    coherence_score = tolong(result["coherence"])
    | project-away result
}

.create table EvaluationDetails(
    item_time: datetime, operation_id: guid, parent_id: string, session_id:string, question:string , ground_truth:string , context:string ,model_answer:string , 
    relevance_score:long ,groundedness_score:long , similarity_score:long ,coherence_score:long
)

.alter table EvaluationDetails policy update
    @'[{ "IsEnabled": true, "Source": "traces_table", "Query": "EvaluationFlowInsert()", "IsTransactional": true}]'

.set-or-append EvaluationDetails <|
    EvaluationFlowInsert()



Evaluation | join kind=inner 
EvaluationDetails on $left.item_OperationId == $right.operation_id and $left.item_ParentId == $right.parent_id
| project EventTime, AgentName, ConfigVersion, ModelDeploymentName,Temperature, SearchType, SearchTopK, Groundedness, Relevance, Similarity,Coherence, ChatSystemPrompt, question, ground_truth, context, model_answer
| render linechart 

//
//aggregated metrics
//

.create-or-alter function EvaluationAggregatedMetricsFunc() { 
    let AppTracesTbl = 
        traces_table
        | extend item = parse_json(records)
        | mv-expand item
        | serialize
        | where item.Type == "AppTraces" 
        | where todatetime(EventProcessedUtcTime) >= todatetime ("2024-12-09")
        | project
            EventProcessedUtcTime,
            item;
     AppTracesTbl
    | project
        item_time = todatetime((item)["time"]),
        operation_id = toguid(item.OperationId),
        parent_id = tostring(item.ParentId),
        messages = dynamic_to_json(item.Message)
    |  where messages has "batch-evaluation-flow-metrics"
    | extend parsed_json = parse_json(messages)
    | mv-expand result = parsed_json.result
    | project-away messages, parsed_json
    | extend metric = tostring(result.metric), score = todouble(result.score)
    | summarize score = take_any(score) by operation_id, parent_id, metric
    | evaluate pivot(metric, take_any(score), operation_id, parent_id)
}


.create  table EvaluationAggregatedMetrics (
operation_id:guid, parent_id:string, coherence:real ,groundedness:real, relevance:real, similarity:real
) 

.alter table EvaluationAggregatedMetrics policy update
    @'[{ "IsEnabled": true, "Source": "traces_table", "Query": "EvaluationAggregatedMetricsFunc()", "IsTransactional": true}]'

.set-or-append EvaluationAggregatedMetrics <|
    EvaluationAggregatedMetricsFunc()